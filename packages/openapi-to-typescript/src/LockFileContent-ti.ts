/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const JSONSchema = t.name("any");

export const ResponseMediaType = t.union(t.lit("application/json"), t.lit("base64"));

export const OperationParameters = t.iface([], {
  "path": t.opt("JSONSchema"),
  "query": t.opt("JSONSchema"),
  "header": t.opt("JSONSchema"),
  "requestBody": t.opt("JSONSchema"),
});

export const OperationResponse = t.iface([], {
  "content": "JSONSchema",
  "headers": "JSONSchema",
  "mediaType": "ResponseMediaType",
});

export const OperationResponseTypes = t.iface([], {
});

export const OperationResponses = t.iface([], {
});

export const Operation = t.iface([], {
  "operationId": t.opt("string"),
  "parameters": "OperationParameters",
  "responses": "OperationResponses",
});

export const Operations = t.iface([], {
});

export const Paths = t.iface([], {
});

export const Schemas = t.iface([], {
});

export const Parameters = t.iface([], {
});

export const NormalizedSpec = t.iface([], {
  "paths": "Paths",
  "components": t.opt(t.iface([], {
    "schemas": t.opt("Schemas"),
    "parameters": t.opt("Parameters"),
  })),
  "definitions": t.opt("Schemas"),
});

export const LockFileContent = t.iface([], {
  "version": t.lit("v1"),
  "spec": "NormalizedSpec",
});

const exportedTypeSuite: t.ITypeSuite = {
  JSONSchema,
  ResponseMediaType,
  OperationParameters,
  OperationResponse,
  OperationResponseTypes,
  OperationResponses,
  Operation,
  Operations,
  Paths,
  Schemas,
  Parameters,
  NormalizedSpec,
  LockFileContent,
};
export default exportedTypeSuite;
