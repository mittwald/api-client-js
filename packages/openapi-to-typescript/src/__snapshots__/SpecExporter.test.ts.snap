// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Exporter creates correct snapshots for 'Mittwald Public API' example 1`] = `
"/* eslint-disable */
/* prettier-ignore */

/**
 * This file is auto-generated with openapi2ts (@mittwald/openapi-to-typescript)
 */

import { KyClient } from \\"@mittwald/api-client/dist/http/KyClient\\";
import { Client } from \\"@mittwald/api-client/dist/http/Client\\";
import { RequestFunction } from \\"@mittwald/api-client/dist/OperationDescriptor\\";
import { OperationDescriptor } from \\"@mittwald/api-client/dist/OperationDescriptor\\";

/**
 * ====================================
 * Types
 * ====================================
 */
export declare module Test {
  namespace Paths {
    namespace V2_Files_FileId {
      namespace Get {
        namespace Parameters {
          interface Path {
            fileID: string;
          }

          type Header = {
            Accept?: \\"application/octet-stream\\" | \\"base64\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Octet_Stream = string;

              type Base64 = string;
            }
          }
        }
      }
    }

    namespace V2_Imapcluster {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: string;
          };

          interface RequestBody {
            id: string;
            members: {
              hostname: string;
              id: string;
            }[];
            name: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }
        }
      }

      namespace Put {
        namespace Parameters {
          type Header = {
            Accept?: string;
          };

          interface RequestBody {
            id: string;
            members: {
              hostname: string;
              id: string;
            }[];
            name: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }
        }
      }
    }

    namespace V2_Mailsystemsetting {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: string;
          };

          interface RequestBody {
            name: string;
            value: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }
        }
      }

      namespace Put {
        namespace Parameters {
          type Header = {
            Accept?: string;
          };

          interface RequestBody {
            name: string;
            value: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }
        }
      }
    }

    namespace V2_Signup_Authentication {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            email: string;
            password: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                expires: number;
                token: string;
              }
            }
          }

          namespace $202 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"SecondFactorRequired\\";
              };
            }
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Authentication_Legacy {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            account: string;
            password: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Authentication_Mfa {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            email?: string;
            multiFactorCode: string;
            password?: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                expires: number;
                token: string;
              }
            }
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $408 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"FirstAuthenticationFactorExpired\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Email_Resend {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            email?: string;
            userId?: string;
          }
        }

        namespace Responses {
          namespace $204 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Logout {
      namespace Put {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            multiFactorCode: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Mfa_Confirm {
      namespace Post {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            multiFactorCode: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                recoveryCodesList: string[];
              }
            }
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Mfa {
      namespace Delete {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }

      namespace Post {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                barcode: string;
                url: string;
              }
            }
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Password {
      namespace Put {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            newPassword: string;
            oldPassword: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Password_Reset_Confirm {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            password: string;
            token: string;
            userId: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Password_Reset {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            email: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Phone {
      namespace Delete {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }

      namespace Get {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }

      namespace Post {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            phoneNumber: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Phone_Verify {
      namespace Post {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            code: string;
            phoneNumber: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $404 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Profile {
      namespace Put {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            profile: {
              firstName?: string;
              lastName?: string;
              title?: 0 | 1 | 2;
            };
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }

      namespace Get {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                profile?: Test.Components.Schemas.De_Mittwald_V1_Signup_Profile;
                userId?: string;
              }
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Mfa_Reset_Recoverycodes {
      namespace Put {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            multiFactorCode: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                recoveryCodesList: string[];
              }
            }
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Registration {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            email: string;
            legacyAccount?: {
              account?: string;
              password?: string;
            };
            password: string;
            profile: Test.Components.Schemas.De_Mittwald_V1_Signup_Profile;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                userId: string;
              }
            }
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $408 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"LegacyAuthenticationExpired\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Registration_Verification {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            email: string;
            token: string;
            userId: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $404 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"EmailNotFound\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Sessions_TokenId {
      namespace Get {
        namespace Parameters {
          interface Path {
            tokenId: string;
          }

          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                session?: Test.Components.Schemas.De_Mittwald_V1_Signup_UserSession;
              }
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $404 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError;
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Sessions {
      namespace Get {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                sessions?: Test.Components.Schemas.De_Mittwald_V1_Signup_UserSession[];
              }
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Ssh {
      namespace Post {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }

          interface RequestBody {
            publicKey: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }

      namespace Get {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                sshKeys?: Test.Components.Schemas.De_Mittwald_V1_Signup_SshKey[];
              }
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Ssh_SshKeyId {
      namespace Delete {
        namespace Parameters {
          interface Path {
            sshKeyId: string;
          }

          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Signup_Token_Check {
      namespace Post {
        namespace Parameters {
          interface Header {
            \\"x-access-token\\": string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }

          namespace $400 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Common_ValidationErrors;
            }
          }

          namespace $401 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"NoAccessTokenProvided\\";
              };
            }
          }

          namespace $429 {
            namespace Content {}
          }

          namespace $500 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Signup_DomainError & {
                name?: \\"InternalServerError\\";
              };
            }
          }
        }
      }
    }

    namespace V2_Software_Config_Validate {
      namespace Get {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Json = {
                name: string;
                version: string;
              }[];
            }
          }
        }
      }

      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          type RequestBody = {
            files: {
              content: string;
              meta?: {
                name: string;
                path?: string;
              };
            }[];
            name: string;
            version: string;
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                stages?: {
                  error_context?: {};
                  error_message?: string;
                  error_type?: string;
                  name?: string;
                }[];
                success: boolean;
              }
            }
          }
        }
      }
    }

    namespace V2_Projects_ProjectId_Software_SoftwareId_Config {
      namespace Post {
        namespace Parameters {
          interface Path {
            projectID: string;
            softwareID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            files: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFile[];
            id?: string;
            softwareInstallationID?: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {}
            }
          }
        }
      }

      namespace Delete {
        namespace Parameters {
          interface Path {
            projectID: string;
            softwareID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {}
            }
          }
        }
      }

      namespace Get {
        namespace Parameters {
          interface Path {
            projectID: string;
            softwareID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                expiration?: {
                  maxVersions?: number;
                  retentionTime?: number;
                };
                id: string;
                revisions: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigRevision[];
              }
            }
          }
        }
      }

      namespace Patch {
        namespace Parameters {
          interface Path {
            projectID: string;
            softwareID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            revision?: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                files: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFileRef[];
                revision: number;
                rollbackRef: number;
              }
            }
          }
        }
      }

      namespace Put {
        namespace Parameters {
          interface Path {
            projectID: string;
            softwareID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            files: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFile[];
            note?: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                files: {
                  id: string;
                  meta?: {
                    name: string;
                    path?: string;
                  };
                }[];
                revision: number;
              }
            }
          }
        }
      }
    }

    namespace V2_Projects_ProjectId_Software_Config_Template {
      namespace Post {
        namespace Parameters {
          interface Path {
            projectID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };

          interface RequestBody {
            files: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFile[];
            id: string;
            note?: string;
            softwareId: string;
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {}
            }
          }
        }
      }

      namespace Get {
        namespace Parameters {
          interface Path {
            projectID: string;
          }

          interface Query {
            softwareID: string;
            includeGlobals?: boolean;
            limit?: number;
            skip?: number;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            interface Headers {
              Link?: string;
              \\"X-Pagination-Limit\\"?: number;
              \\"X-Pagination-Skip\\"?: number;
              \\"X-Pagination-TotalCount\\"?: number;
            }

            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Software_ConfigTemplate[];
            }
          }
        }
      }
    }

    namespace V2_Projects_ProjectId_Software_Config_Template_Id {
      namespace Delete {
        namespace Parameters {
          interface Path {
            projectID: string;
            id: string;
          }

          type Header = {
            Accept?: string;
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {}
          }
        }
      }

      namespace Get {
        namespace Parameters {
          interface Path {
            projectID: string;
            id: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Software_ConfigTemplate;
            }
          }
        }
      }
    }

    namespace V2_Projects_ProjectId_Software_SoftwareId {
      namespace Get {
        namespace Parameters {
          interface Path {
            projectID: string;
            softwareID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.De_Mittwald_V1_Software_Software;
            }
          }
        }
      }
    }

    namespace V2_Projects_ProjectId_Software_SoftwareId_Settings {
      namespace Patch {
        namespace Parameters {
          interface Path {
            projectID: string;
            softwareID: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };

          type RequestBody = Test.Components.Schemas.De_Mittwald_V1_Software_SoftwareSetting[];
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {}
            }
          }
        }
      }
    }
  }

  namespace Components {
    namespace Schemas {
      interface De_Mittwald_V1_Signup_DeviceInfo {
        browser?: string;
        model?: string;
        os?: string;
        type?: string;
      }

      interface De_Mittwald_V1_Signup_DomainError {
        info?: {};
        message: string;
        name: string;
      }

      interface De_Mittwald_V1_Signup_Location {
        city?: string;
        country?: string;
      }

      interface De_Mittwald_V1_Signup_Profile {
        firstName: string;
        lastName: string;
        title?: 0 | 1 | 2;
      }

      interface De_Mittwald_V1_Signup_SshKey {
        algorithm: string;
        comment: string;
        createdAt: string;
        expiresAt?: string;
        fingerprint: string;
        key: string;
        sshKeyId: string;
      }

      interface De_Mittwald_V1_Signup_UserSession {
        created: number;
        device: Test.Components.Schemas.De_Mittwald_V1_Signup_DeviceInfo;
        lastAccess?: number;
        location?: Test.Components.Schemas.De_Mittwald_V1_Signup_Location;
        tokenId: string;
      }

      interface De_Mittwald_V1_Common_ValidationError {
        context?: {
          [a: string]: any;
        };
        message: string;
        path: string;
        type: string;
      }

      interface De_Mittwald_V1_Common_ValidationErrors {
        errorObjects: Test.Components.Schemas.De_Mittwald_V1_Common_ValidationError[];
        name: \\"ValidationError\\";
      }

      interface De_Mittwald_V1_Software_ConfigRevision {
        expire?: number;
        files: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFileRef[];
        note?: string;
        revision: number;
        updated: number;
      }

      interface De_Mittwald_V1_Software_ConfigTemplate {
        files: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFileRef[];
        id: string;
        isGlobal?: boolean;
        note?: string;
        projectId?: string;
        softwareId: string;
        updatedAt?: number;
      }

      interface De_Mittwald_V1_Software_ConfigFile {
        content: string;
        meta?: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFileMetadata;
      }

      interface De_Mittwald_V1_Software_ConfigFileMetadata {
        name: string;
        path?: string;
      }

      interface De_Mittwald_V1_Software_ConfigFileRef {
        id?: string;
        meta?: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigFileMetadata;
      }

      interface De_Mittwald_V1_Software_Software {
        config: Test.Components.Schemas.De_Mittwald_V1_Software_SoftwareConfig;
        id: string;
        projectId: string;
        settings: {
          [a: string]: any;
        };
        softwareId: string;
        softwareVersion: string;
        updatedAt: number;
      }

      interface De_Mittwald_V1_Software_SoftwareConfig {
        configExpiration?: {
          maxVersions?: number;
          retentionTime?: number;
        };
        latestConfigRevision?: number;
        revisions: Test.Components.Schemas.De_Mittwald_V1_Software_ConfigRevision[];
      }

      interface De_Mittwald_V1_Software_SoftwareSetting {
        name: string;
        value: string;
      }
    }

    namespace Parameters {}
  }

  namespace Definitions {}
}

/**
 * ====================================
 * Descriptors
 * ====================================
 */

export const fileServiceFilesGetById: OperationDescriptor<
  {
    header?: Test.Paths.V2_Files_FileId.Get.Parameters.Header;

    path: Test.Paths.V2_Files_FileId.Get.Parameters.Path;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/octet-stream\\";
      content: Test.Paths.V2_Files_FileId.Get.Responses.$200.Content.Application_Octet_Stream;
    })
  | ({ status: 200 } & {
      mediaType: \\"base64\\";
      content: Test.Paths.V2_Files_FileId.Get.Responses.$200.Content.Base64;
    })
> = {
  path: \\"/v2/files/{fileID}\\",
  method: \\"get\\",
  operationId: \\"fileServiceFilesGetById\\",
};

export const mailsystemServiceImapclusterCreate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Imapcluster.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Imapcluster.Post.Parameters.Header;
  },
  { status: 200 } & {
    content: undefined;
  }
> = {
  path: \\"/v2/imapcluster\\",
  method: \\"post\\",
  operationId: \\"mailsystemServiceImapclusterCreate\\",
};

export const mailsystemServiceImapclusterUpdate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Imapcluster.Put.Parameters.RequestBody;

    header?: Test.Paths.V2_Imapcluster.Put.Parameters.Header;
  },
  { status: 200 } & {
    content: undefined;
  }
> = {
  path: \\"/v2/imapcluster\\",
  method: \\"put\\",
  operationId: \\"mailsystemServiceImapclusterUpdate\\",
};

export const mailsystemServiceSettingCreate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Mailsystemsetting.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Mailsystemsetting.Post.Parameters.Header;
  },
  { status: 200 } & {
    content: undefined;
  }
> = {
  path: \\"/v2/mailsystemsetting\\",
  method: \\"post\\",
  operationId: \\"mailsystemServiceSettingCreate\\",
};

export const mailsystemServiceSettingUpdate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Mailsystemsetting.Put.Parameters.RequestBody;

    header?: Test.Paths.V2_Mailsystemsetting.Put.Parameters.Header;
  },
  { status: 200 } & {
    content: undefined;
  }
> = {
  path: \\"/v2/mailsystemsetting\\",
  method: \\"put\\",
  operationId: \\"mailsystemServiceSettingUpdate\\",
};

export const signupApiAuthenticate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Authentication.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Authentication.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 202 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication.Post.Responses.$202.Content.Application_Json;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/authentication\\",
  method: \\"post\\",
  operationId: \\"signupApiAuthenticate\\",
};

export const signupApiAuthenticateLegacy: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Authentication_Legacy.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Authentication_Legacy.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication_Legacy.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication_Legacy.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/authentication/legacy\\",
  method: \\"post\\",
  operationId: \\"signupApiAuthenticateLegacy\\",
};

export const signupApiAuthenticateMfa: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Authentication_Mfa.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Authentication_Mfa.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication_Mfa.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication_Mfa.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 408 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication_Mfa.Post.Responses.$408.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Authentication_Mfa.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/authentication/mfa\\",
  method: \\"post\\",
  operationId: \\"signupApiAuthenticateMfa\\",
};

export const signupApiEmailResend: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Email_Resend.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Email_Resend.Post.Parameters.Header;
  },
  | ({ status: 204 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Email_Resend.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Email_Resend.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/email/resend\\",
  method: \\"post\\",
  operationId: \\"signupApiEmailResend\\",
};

export const signupApiLogout: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Logout.Put.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Logout.Put.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Logout.Put.Responses.$400.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Logout.Put.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/logout\\",
  method: \\"put\\",
  operationId: \\"signupApiLogout\\",
};

export const signupApiMfaConfirm: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Mfa_Confirm.Post.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Mfa_Confirm.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Confirm.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Confirm.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Confirm.Post.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Confirm.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/mfa/confirm\\",
  method: \\"post\\",
  operationId: \\"signupApiMfaConfirm\\",
};

export const signupApiMfaDisable: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Mfa.Delete.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa.Delete.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa.Delete.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa.Delete.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/mfa\\",
  method: \\"delete\\",
  operationId: \\"signupApiMfaDisable\\",
};

export const signupApiMfaInit: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Mfa.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa.Post.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/mfa\\",
  method: \\"post\\",
  operationId: \\"signupApiMfaInit\\",
};

export const signupApiPasswordChange: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Password.Put.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Password.Put.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Password.Put.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Password.Put.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Password.Put.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/password\\",
  method: \\"put\\",
  operationId: \\"signupApiPasswordChange\\",
};

export const signupApiPasswordResetConfirm: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Password_Reset_Confirm.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Password_Reset_Confirm.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Password_Reset_Confirm.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Password_Reset_Confirm.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/password/reset/confirm\\",
  method: \\"post\\",
  operationId: \\"signupApiPasswordResetConfirm\\",
};

export const signupApiPasswordResetInit: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Password_Reset.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Password_Reset.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Password_Reset.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Password_Reset.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/password/reset\\",
  method: \\"post\\",
  operationId: \\"signupApiPasswordResetInit\\",
};

export const signupApiPhoneNumberDelete: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Phone.Delete.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Delete.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Delete.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Delete.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/phone\\",
  method: \\"delete\\",
  operationId: \\"signupApiPhoneNumberDelete\\",
};

export const signupApiPhoneNumberGet: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Phone.Get.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Get.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Get.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Get.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/phone\\",
  method: \\"get\\",
  operationId: \\"signupApiPhoneNumberGet\\",
};

export const signupApiPhoneNumberInitProcess: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Phone.Post.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Phone.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Post.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/phone\\",
  method: \\"post\\",
  operationId: \\"signupApiPhoneNumberInitProcess\\",
};

export const signupApiPhoneNumberVerify: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Phone_Verify.Post.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Phone_Verify.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone_Verify.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone_Verify.Post.Responses.$401.Content.Application_Json;
    })
  | ({ status: 404 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone_Verify.Post.Responses.$404.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Phone_Verify.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/phone/verify\\",
  method: \\"post\\",
  operationId: \\"signupApiPhoneNumberVerify\\",
};

export const signupApiProfileChange: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Profile.Put.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Profile.Put.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Profile.Put.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Profile.Put.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Profile.Put.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/profile\\",
  method: \\"put\\",
  operationId: \\"signupApiProfileChange\\",
};

export const signupApiProfileGet: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Profile.Get.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Profile.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Profile.Get.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Profile.Get.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/profile\\",
  method: \\"get\\",
  operationId: \\"signupApiProfileGet\\",
};

export const signupApiRecoverycodesReset: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Mfa_Reset_Recoverycodes.Put.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Mfa_Reset_Recoverycodes.Put.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Reset_Recoverycodes.Put.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Reset_Recoverycodes.Put.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Reset_Recoverycodes.Put.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Mfa_Reset_Recoverycodes.Put.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/mfa/reset-recoverycodes\\",
  method: \\"put\\",
  operationId: \\"signupApiRecoverycodesReset\\",
};

export const signupApiRegister: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Registration.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Registration.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Registration.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Registration.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 408 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Registration.Post.Responses.$408.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Registration.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/registration\\",
  method: \\"post\\",
  operationId: \\"signupApiRegister\\",
};

export const signupApiRegistrationVerify: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Registration_Verification.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Signup_Registration_Verification.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Registration_Verification.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 404 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Registration_Verification.Post.Responses.$404.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Registration_Verification.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/registration/verification\\",
  method: \\"post\\",
  operationId: \\"signupApiRegistrationVerify\\",
};

export const signupApiSessionGet: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Sessions_TokenId.Get.Parameters.Header;

    path: Test.Paths.V2_Signup_Sessions_TokenId.Get.Parameters.Path;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Sessions_TokenId.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Sessions_TokenId.Get.Responses.$401.Content.Application_Json;
    })
  | ({ status: 404 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Sessions_TokenId.Get.Responses.$404.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Sessions_TokenId.Get.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/sessions/{tokenId}\\",
  method: \\"get\\",
  operationId: \\"signupApiSessionGet\\",
};

export const signupApiSessionsList: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Sessions.Get.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Sessions.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Sessions.Get.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Sessions.Get.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/sessions\\",
  method: \\"get\\",
  operationId: \\"signupApiSessionsList\\",
};

export const signupApiSshCreate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Signup_Ssh.Post.Parameters.RequestBody;

    header: Test.Paths.V2_Signup_Ssh.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh.Post.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/ssh\\",
  method: \\"post\\",
  operationId: \\"signupApiSshCreate\\",
};

export const signupApiSshList: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Ssh.Get.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh.Get.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh.Get.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/ssh\\",
  method: \\"get\\",
  operationId: \\"signupApiSshList\\",
};

export const signupApiSshDelete: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Ssh_SshKeyId.Delete.Parameters.Header;

    path: Test.Paths.V2_Signup_Ssh_SshKeyId.Delete.Parameters.Path;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh_SshKeyId.Delete.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Ssh_SshKeyId.Delete.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/ssh/{sshKeyId}\\",
  method: \\"delete\\",
  operationId: \\"signupApiSshDelete\\",
};

export const signupApiTokenCheck: OperationDescriptor<
  {
    header: Test.Paths.V2_Signup_Token_Check.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      content: undefined;
    })
  | ({ status: 400 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Token_Check.Post.Responses.$400.Content.Application_Json;
    })
  | ({ status: 401 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Token_Check.Post.Responses.$401.Content.Application_Json;
    })
  | ({ status: 429 } & {
      content: undefined;
    })
  | ({ status: 500 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.V2_Signup_Token_Check.Post.Responses.$500.Content.Application_Json;
    })
> = {
  path: \\"/v2/signup/token/check\\",
  method: \\"post\\",
  operationId: \\"signupApiTokenCheck\\",
};

export const softwareServiceListValidators: OperationDescriptor<
  {
    header?: Test.Paths.V2_Software_Config_Validate.Get.Parameters.Header;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Software_Config_Validate.Get.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/software/config/validate\\",
  method: \\"get\\",
  operationId: \\"softwareServiceListValidators\\",
};

export const softwareServiceValidate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Software_Config_Validate.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Software_Config_Validate.Post.Parameters.Header;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Software_Config_Validate.Post.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/software/config/validate\\",
  method: \\"post\\",
  operationId: \\"softwareServiceValidate\\",
};

export const softwareServiceSoftwareConfigCreate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Post.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Post.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Post.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/{softwareID}/config\\",
  method: \\"post\\",
  operationId: \\"softwareServiceSoftwareConfigCreate\\",
};

export const softwareServiceSoftwareConfigDelete: OperationDescriptor<
  {
    header?: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Delete.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Delete.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Delete.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/{softwareID}/config\\",
  method: \\"delete\\",
  operationId: \\"softwareServiceSoftwareConfigDelete\\",
};

export const softwareServiceSoftwareConfigGetById: OperationDescriptor<
  {
    header?: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Get.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Get.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Get.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/{softwareID}/config\\",
  method: \\"get\\",
  operationId: \\"softwareServiceSoftwareConfigGetById\\",
};

export const softwareServiceSoftwareConfigRollback: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Patch.Parameters.RequestBody;

    header?: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Patch.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Patch.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Patch.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/{softwareID}/config\\",
  method: \\"patch\\",
  operationId: \\"softwareServiceSoftwareConfigRollback\\",
};

export const softwareServiceSoftwareConfigUpdate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Put.Parameters.RequestBody;

    header?: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Put.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Put.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Config.Put.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/{softwareID}/config\\",
  method: \\"put\\",
  operationId: \\"softwareServiceSoftwareConfigUpdate\\",
};

export const softwareServiceSoftwareConfigtemplateCreate: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Post.Parameters.RequestBody;

    header?: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Post.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Post.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Post.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/config/template\\",
  method: \\"post\\",
  operationId: \\"softwareServiceSoftwareConfigtemplateCreate\\",
};

export const softwareServiceSoftwareConfigtemplateGetList: OperationDescriptor<
  {
    header?: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Get.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Get.Parameters.Path;

    query: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Get.Parameters.Query;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Get.Responses.$200.Content.Application_Json;

    headers: Test.Paths.V2_Projects_ProjectId_Software_Config_Template.Get.Responses.$200.Headers;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/config/template\\",
  method: \\"get\\",
  operationId: \\"softwareServiceSoftwareConfigtemplateGetList\\",
};

export const softwareServiceSoftwareConfigtemplateDelete: OperationDescriptor<
  {
    header?: Test.Paths.V2_Projects_ProjectId_Software_Config_Template_Id.Delete.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_Config_Template_Id.Delete.Parameters.Path;
  },
  { status: 200 } & {
    content: undefined;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/config/template/{id}\\",
  method: \\"delete\\",
  operationId: \\"softwareServiceSoftwareConfigtemplateDelete\\",
};

export const softwareServiceSoftwareConfigtemplateGetSpecific: OperationDescriptor<
  {
    header?: Test.Paths.V2_Projects_ProjectId_Software_Config_Template_Id.Get.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_Config_Template_Id.Get.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_Config_Template_Id.Get.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/config/template/{id}\\",
  method: \\"get\\",
  operationId: \\"softwareServiceSoftwareConfigtemplateGetSpecific\\",
};

export const softwareServiceSoftwareGetById: OperationDescriptor<
  {
    header?: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId.Get.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId.Get.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId.Get.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/{softwareID}\\",
  method: \\"get\\",
  operationId: \\"softwareServiceSoftwareGetById\\",
};

export const softwareServiceSoftwareSettingsDeclare: OperationDescriptor<
  {
    requestBody: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Settings.Patch.Parameters.RequestBody;

    header?: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Settings.Patch.Parameters.Header;

    path: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Settings.Patch.Parameters.Path;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.V2_Projects_ProjectId_Software_SoftwareId_Settings.Patch.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/v2/projects/{projectID}/software/{softwareID}/settings\\",
  method: \\"patch\\",
  operationId: \\"softwareServiceSoftwareSettingsDeclare\\",
};

/**
 * ====================================
 * Client
 * ====================================
 */
export class TestClient {
  private static instance: TestClient | undefined;

  public static getInstance(): TestClient {
    const requireClientInstanceMethod = (
      methodName: string | symbol
    ): Function => {
      const client = TestClient.instance as
        | undefined
        | Record<string | symbol, any>;

      if (!client) {
        throw new Error(
          \\"ApiClientInstanceNotSet: API-Client-instance must be set before using hooks. Use TestClient.setInstance().\\"
        );
      }

      if (!(methodName in client)) {
        throw new Error(
          \`InvalidMethodCall: Could not find method \${String(
            methodName
          )} in TestClient\`
        );
      }

      const method = client[methodName];

      if (typeof method !== \\"function\\") {
        throw new Error(
          \`InvalidMethodCall: \${String(
            methodName
          )} in TestClient is not a function\`
        );
      }

      return method;
    };

    /**
     * Catch access to all props and return proxy method that proxies
     * calls to the underlying client instance, while accessing the instance
     * at call-time.
     */
    const lazyAccessingClientInstanceHandler: ProxyHandler<TestClient> = {
      get(client, prop) {
        return (...params: any[]) =>
          requireClientInstanceMethod(prop)(...params);
      },
    };

    return new Proxy({} as TestClient, lazyAccessingClientInstanceHandler);
  }

  public static setInstance(client: TestClient): void {
    TestClient.instance = client;
  }

  public fileServiceFilesGetById: RequestFunction<
    typeof fileServiceFilesGetById
  >;

  public mailsystemServiceImapclusterCreate: RequestFunction<
    typeof mailsystemServiceImapclusterCreate
  >;

  public mailsystemServiceImapclusterUpdate: RequestFunction<
    typeof mailsystemServiceImapclusterUpdate
  >;

  public mailsystemServiceSettingCreate: RequestFunction<
    typeof mailsystemServiceSettingCreate
  >;

  public mailsystemServiceSettingUpdate: RequestFunction<
    typeof mailsystemServiceSettingUpdate
  >;

  public signupApiAuthenticate: RequestFunction<typeof signupApiAuthenticate>;

  public signupApiAuthenticateLegacy: RequestFunction<
    typeof signupApiAuthenticateLegacy
  >;

  public signupApiAuthenticateMfa: RequestFunction<
    typeof signupApiAuthenticateMfa
  >;

  public signupApiEmailResend: RequestFunction<typeof signupApiEmailResend>;

  public signupApiLogout: RequestFunction<typeof signupApiLogout>;

  public signupApiMfaConfirm: RequestFunction<typeof signupApiMfaConfirm>;

  public signupApiMfaDisable: RequestFunction<typeof signupApiMfaDisable>;

  public signupApiMfaInit: RequestFunction<typeof signupApiMfaInit>;

  public signupApiPasswordChange: RequestFunction<
    typeof signupApiPasswordChange
  >;

  public signupApiPasswordResetConfirm: RequestFunction<
    typeof signupApiPasswordResetConfirm
  >;

  public signupApiPasswordResetInit: RequestFunction<
    typeof signupApiPasswordResetInit
  >;

  public signupApiPhoneNumberDelete: RequestFunction<
    typeof signupApiPhoneNumberDelete
  >;

  public signupApiPhoneNumberGet: RequestFunction<
    typeof signupApiPhoneNumberGet
  >;

  public signupApiPhoneNumberInitProcess: RequestFunction<
    typeof signupApiPhoneNumberInitProcess
  >;

  public signupApiPhoneNumberVerify: RequestFunction<
    typeof signupApiPhoneNumberVerify
  >;

  public signupApiProfileChange: RequestFunction<typeof signupApiProfileChange>;

  public signupApiProfileGet: RequestFunction<typeof signupApiProfileGet>;

  public signupApiRecoverycodesReset: RequestFunction<
    typeof signupApiRecoverycodesReset
  >;

  public signupApiRegister: RequestFunction<typeof signupApiRegister>;

  public signupApiRegistrationVerify: RequestFunction<
    typeof signupApiRegistrationVerify
  >;

  public signupApiSessionGet: RequestFunction<typeof signupApiSessionGet>;

  public signupApiSessionsList: RequestFunction<typeof signupApiSessionsList>;

  public signupApiSshCreate: RequestFunction<typeof signupApiSshCreate>;

  public signupApiSshList: RequestFunction<typeof signupApiSshList>;

  public signupApiSshDelete: RequestFunction<typeof signupApiSshDelete>;

  public signupApiTokenCheck: RequestFunction<typeof signupApiTokenCheck>;

  public softwareServiceListValidators: RequestFunction<
    typeof softwareServiceListValidators
  >;

  public softwareServiceValidate: RequestFunction<
    typeof softwareServiceValidate
  >;

  public softwareServiceSoftwareConfigCreate: RequestFunction<
    typeof softwareServiceSoftwareConfigCreate
  >;

  public softwareServiceSoftwareConfigDelete: RequestFunction<
    typeof softwareServiceSoftwareConfigDelete
  >;

  public softwareServiceSoftwareConfigGetById: RequestFunction<
    typeof softwareServiceSoftwareConfigGetById
  >;

  public softwareServiceSoftwareConfigRollback: RequestFunction<
    typeof softwareServiceSoftwareConfigRollback
  >;

  public softwareServiceSoftwareConfigUpdate: RequestFunction<
    typeof softwareServiceSoftwareConfigUpdate
  >;

  public softwareServiceSoftwareConfigtemplateCreate: RequestFunction<
    typeof softwareServiceSoftwareConfigtemplateCreate
  >;

  public softwareServiceSoftwareConfigtemplateGetList: RequestFunction<
    typeof softwareServiceSoftwareConfigtemplateGetList
  >;

  public softwareServiceSoftwareConfigtemplateDelete: RequestFunction<
    typeof softwareServiceSoftwareConfigtemplateDelete
  >;

  public softwareServiceSoftwareConfigtemplateGetSpecific: RequestFunction<
    typeof softwareServiceSoftwareConfigtemplateGetSpecific
  >;

  public softwareServiceSoftwareGetById: RequestFunction<
    typeof softwareServiceSoftwareGetById
  >;

  public softwareServiceSoftwareSettingsDeclare: RequestFunction<
    typeof softwareServiceSoftwareSettingsDeclare
  >;

  public constructor(clientOrUrl: Client | string) {
    const client =
      typeof clientOrUrl === \\"string\\"
        ? new KyClient({ ky: { prefixUrl: clientOrUrl } })
        : clientOrUrl;

    this.fileServiceFilesGetById = client.requestFunctionFactory(
      fileServiceFilesGetById
    );

    this.mailsystemServiceImapclusterCreate = client.requestFunctionFactory(
      mailsystemServiceImapclusterCreate
    );

    this.mailsystemServiceImapclusterUpdate = client.requestFunctionFactory(
      mailsystemServiceImapclusterUpdate
    );

    this.mailsystemServiceSettingCreate = client.requestFunctionFactory(
      mailsystemServiceSettingCreate
    );

    this.mailsystemServiceSettingUpdate = client.requestFunctionFactory(
      mailsystemServiceSettingUpdate
    );

    this.signupApiAuthenticate = client.requestFunctionFactory(
      signupApiAuthenticate
    );

    this.signupApiAuthenticateLegacy = client.requestFunctionFactory(
      signupApiAuthenticateLegacy
    );

    this.signupApiAuthenticateMfa = client.requestFunctionFactory(
      signupApiAuthenticateMfa
    );

    this.signupApiEmailResend = client.requestFunctionFactory(
      signupApiEmailResend
    );

    this.signupApiLogout = client.requestFunctionFactory(signupApiLogout);

    this.signupApiMfaConfirm = client.requestFunctionFactory(
      signupApiMfaConfirm
    );

    this.signupApiMfaDisable = client.requestFunctionFactory(
      signupApiMfaDisable
    );

    this.signupApiMfaInit = client.requestFunctionFactory(signupApiMfaInit);

    this.signupApiPasswordChange = client.requestFunctionFactory(
      signupApiPasswordChange
    );

    this.signupApiPasswordResetConfirm = client.requestFunctionFactory(
      signupApiPasswordResetConfirm
    );

    this.signupApiPasswordResetInit = client.requestFunctionFactory(
      signupApiPasswordResetInit
    );

    this.signupApiPhoneNumberDelete = client.requestFunctionFactory(
      signupApiPhoneNumberDelete
    );

    this.signupApiPhoneNumberGet = client.requestFunctionFactory(
      signupApiPhoneNumberGet
    );

    this.signupApiPhoneNumberInitProcess = client.requestFunctionFactory(
      signupApiPhoneNumberInitProcess
    );

    this.signupApiPhoneNumberVerify = client.requestFunctionFactory(
      signupApiPhoneNumberVerify
    );

    this.signupApiProfileChange = client.requestFunctionFactory(
      signupApiProfileChange
    );

    this.signupApiProfileGet = client.requestFunctionFactory(
      signupApiProfileGet
    );

    this.signupApiRecoverycodesReset = client.requestFunctionFactory(
      signupApiRecoverycodesReset
    );

    this.signupApiRegister = client.requestFunctionFactory(signupApiRegister);

    this.signupApiRegistrationVerify = client.requestFunctionFactory(
      signupApiRegistrationVerify
    );

    this.signupApiSessionGet = client.requestFunctionFactory(
      signupApiSessionGet
    );

    this.signupApiSessionsList = client.requestFunctionFactory(
      signupApiSessionsList
    );

    this.signupApiSshCreate = client.requestFunctionFactory(signupApiSshCreate);

    this.signupApiSshList = client.requestFunctionFactory(signupApiSshList);

    this.signupApiSshDelete = client.requestFunctionFactory(signupApiSshDelete);

    this.signupApiTokenCheck = client.requestFunctionFactory(
      signupApiTokenCheck
    );

    this.softwareServiceListValidators = client.requestFunctionFactory(
      softwareServiceListValidators
    );

    this.softwareServiceValidate = client.requestFunctionFactory(
      softwareServiceValidate
    );

    this.softwareServiceSoftwareConfigCreate = client.requestFunctionFactory(
      softwareServiceSoftwareConfigCreate
    );

    this.softwareServiceSoftwareConfigDelete = client.requestFunctionFactory(
      softwareServiceSoftwareConfigDelete
    );

    this.softwareServiceSoftwareConfigGetById = client.requestFunctionFactory(
      softwareServiceSoftwareConfigGetById
    );

    this.softwareServiceSoftwareConfigRollback = client.requestFunctionFactory(
      softwareServiceSoftwareConfigRollback
    );

    this.softwareServiceSoftwareConfigUpdate = client.requestFunctionFactory(
      softwareServiceSoftwareConfigUpdate
    );

    this.softwareServiceSoftwareConfigtemplateCreate = client.requestFunctionFactory(
      softwareServiceSoftwareConfigtemplateCreate
    );

    this.softwareServiceSoftwareConfigtemplateGetList = client.requestFunctionFactory(
      softwareServiceSoftwareConfigtemplateGetList
    );

    this.softwareServiceSoftwareConfigtemplateDelete = client.requestFunctionFactory(
      softwareServiceSoftwareConfigtemplateDelete
    );

    this.softwareServiceSoftwareConfigtemplateGetSpecific = client.requestFunctionFactory(
      softwareServiceSoftwareConfigtemplateGetSpecific
    );

    this.softwareServiceSoftwareGetById = client.requestFunctionFactory(
      softwareServiceSoftwareGetById
    );

    this.softwareServiceSoftwareSettingsDeclare = client.requestFunctionFactory(
      softwareServiceSoftwareSettingsDeclare
    );
  }
}

/**
 * ====================================
 * React Hooks
 * ====================================
 */
import { createGetApiResource } from \\"@mittwald/react-api-hooks/dist/createGetApiResource\\";
import { createRefreshCache } from \\"@mittwald/react-api-hooks/dist/createRefreshCache\\";

export const useFileServiceFilesGetById = createGetApiResource(
  fileServiceFilesGetById,
  TestClient.getInstance().fileServiceFilesGetById
);

export const useMailsystemServiceImapclusterCreate = createGetApiResource(
  mailsystemServiceImapclusterCreate,
  TestClient.getInstance().mailsystemServiceImapclusterCreate
);

export const useMailsystemServiceImapclusterUpdate = createGetApiResource(
  mailsystemServiceImapclusterUpdate,
  TestClient.getInstance().mailsystemServiceImapclusterUpdate
);

export const useMailsystemServiceSettingCreate = createGetApiResource(
  mailsystemServiceSettingCreate,
  TestClient.getInstance().mailsystemServiceSettingCreate
);

export const useMailsystemServiceSettingUpdate = createGetApiResource(
  mailsystemServiceSettingUpdate,
  TestClient.getInstance().mailsystemServiceSettingUpdate
);

export const useSignupApiAuthenticate = createGetApiResource(
  signupApiAuthenticate,
  TestClient.getInstance().signupApiAuthenticate
);

export const useSignupApiAuthenticateLegacy = createGetApiResource(
  signupApiAuthenticateLegacy,
  TestClient.getInstance().signupApiAuthenticateLegacy
);

export const useSignupApiAuthenticateMfa = createGetApiResource(
  signupApiAuthenticateMfa,
  TestClient.getInstance().signupApiAuthenticateMfa
);

export const useSignupApiEmailResend = createGetApiResource(
  signupApiEmailResend,
  TestClient.getInstance().signupApiEmailResend
);

export const useSignupApiLogout = createGetApiResource(
  signupApiLogout,
  TestClient.getInstance().signupApiLogout
);

export const useSignupApiMfaConfirm = createGetApiResource(
  signupApiMfaConfirm,
  TestClient.getInstance().signupApiMfaConfirm
);

export const useSignupApiMfaDisable = createGetApiResource(
  signupApiMfaDisable,
  TestClient.getInstance().signupApiMfaDisable
);

export const useSignupApiMfaInit = createGetApiResource(
  signupApiMfaInit,
  TestClient.getInstance().signupApiMfaInit
);

export const useSignupApiPasswordChange = createGetApiResource(
  signupApiPasswordChange,
  TestClient.getInstance().signupApiPasswordChange
);

export const useSignupApiPasswordResetConfirm = createGetApiResource(
  signupApiPasswordResetConfirm,
  TestClient.getInstance().signupApiPasswordResetConfirm
);

export const useSignupApiPasswordResetInit = createGetApiResource(
  signupApiPasswordResetInit,
  TestClient.getInstance().signupApiPasswordResetInit
);

export const useSignupApiPhoneNumberDelete = createGetApiResource(
  signupApiPhoneNumberDelete,
  TestClient.getInstance().signupApiPhoneNumberDelete
);

export const useSignupApiPhoneNumberGet = createGetApiResource(
  signupApiPhoneNumberGet,
  TestClient.getInstance().signupApiPhoneNumberGet
);

export const useSignupApiPhoneNumberInitProcess = createGetApiResource(
  signupApiPhoneNumberInitProcess,
  TestClient.getInstance().signupApiPhoneNumberInitProcess
);

export const useSignupApiPhoneNumberVerify = createGetApiResource(
  signupApiPhoneNumberVerify,
  TestClient.getInstance().signupApiPhoneNumberVerify
);

export const useSignupApiProfileChange = createGetApiResource(
  signupApiProfileChange,
  TestClient.getInstance().signupApiProfileChange
);

export const useSignupApiProfileGet = createGetApiResource(
  signupApiProfileGet,
  TestClient.getInstance().signupApiProfileGet
);

export const useSignupApiRecoverycodesReset = createGetApiResource(
  signupApiRecoverycodesReset,
  TestClient.getInstance().signupApiRecoverycodesReset
);

export const useSignupApiRegister = createGetApiResource(
  signupApiRegister,
  TestClient.getInstance().signupApiRegister
);

export const useSignupApiRegistrationVerify = createGetApiResource(
  signupApiRegistrationVerify,
  TestClient.getInstance().signupApiRegistrationVerify
);

export const useSignupApiSessionGet = createGetApiResource(
  signupApiSessionGet,
  TestClient.getInstance().signupApiSessionGet
);

export const useSignupApiSessionsList = createGetApiResource(
  signupApiSessionsList,
  TestClient.getInstance().signupApiSessionsList
);

export const useSignupApiSshCreate = createGetApiResource(
  signupApiSshCreate,
  TestClient.getInstance().signupApiSshCreate
);

export const useSignupApiSshList = createGetApiResource(
  signupApiSshList,
  TestClient.getInstance().signupApiSshList
);

export const useSignupApiSshDelete = createGetApiResource(
  signupApiSshDelete,
  TestClient.getInstance().signupApiSshDelete
);

export const useSignupApiTokenCheck = createGetApiResource(
  signupApiTokenCheck,
  TestClient.getInstance().signupApiTokenCheck
);

export const useSoftwareServiceListValidators = createGetApiResource(
  softwareServiceListValidators,
  TestClient.getInstance().softwareServiceListValidators
);

export const useSoftwareServiceValidate = createGetApiResource(
  softwareServiceValidate,
  TestClient.getInstance().softwareServiceValidate
);

export const useSoftwareServiceSoftwareConfigCreate = createGetApiResource(
  softwareServiceSoftwareConfigCreate,
  TestClient.getInstance().softwareServiceSoftwareConfigCreate
);

export const useSoftwareServiceSoftwareConfigDelete = createGetApiResource(
  softwareServiceSoftwareConfigDelete,
  TestClient.getInstance().softwareServiceSoftwareConfigDelete
);

export const useSoftwareServiceSoftwareConfigGetById = createGetApiResource(
  softwareServiceSoftwareConfigGetById,
  TestClient.getInstance().softwareServiceSoftwareConfigGetById
);

export const useSoftwareServiceSoftwareConfigRollback = createGetApiResource(
  softwareServiceSoftwareConfigRollback,
  TestClient.getInstance().softwareServiceSoftwareConfigRollback
);

export const useSoftwareServiceSoftwareConfigUpdate = createGetApiResource(
  softwareServiceSoftwareConfigUpdate,
  TestClient.getInstance().softwareServiceSoftwareConfigUpdate
);

export const useSoftwareServiceSoftwareConfigtemplateCreate = createGetApiResource(
  softwareServiceSoftwareConfigtemplateCreate,
  TestClient.getInstance().softwareServiceSoftwareConfigtemplateCreate
);

export const useSoftwareServiceSoftwareConfigtemplateGetList = createGetApiResource(
  softwareServiceSoftwareConfigtemplateGetList,
  TestClient.getInstance().softwareServiceSoftwareConfigtemplateGetList
);

export const useSoftwareServiceSoftwareConfigtemplateDelete = createGetApiResource(
  softwareServiceSoftwareConfigtemplateDelete,
  TestClient.getInstance().softwareServiceSoftwareConfigtemplateDelete
);

export const useSoftwareServiceSoftwareConfigtemplateGetSpecific = createGetApiResource(
  softwareServiceSoftwareConfigtemplateGetSpecific,
  TestClient.getInstance().softwareServiceSoftwareConfigtemplateGetSpecific
);

export const useSoftwareServiceSoftwareGetById = createGetApiResource(
  softwareServiceSoftwareGetById,
  TestClient.getInstance().softwareServiceSoftwareGetById
);

export const useSoftwareServiceSoftwareSettingsDeclare = createGetApiResource(
  softwareServiceSoftwareSettingsDeclare,
  TestClient.getInstance().softwareServiceSoftwareSettingsDeclare
);

export const testCache = {
  refreshFileServiceFilesGetById: createRefreshCache(fileServiceFilesGetById),

  refreshMailsystemServiceImapclusterCreate: createRefreshCache(
    mailsystemServiceImapclusterCreate
  ),

  refreshMailsystemServiceImapclusterUpdate: createRefreshCache(
    mailsystemServiceImapclusterUpdate
  ),

  refreshMailsystemServiceSettingCreate: createRefreshCache(
    mailsystemServiceSettingCreate
  ),

  refreshMailsystemServiceSettingUpdate: createRefreshCache(
    mailsystemServiceSettingUpdate
  ),

  refreshSignupApiAuthenticate: createRefreshCache(signupApiAuthenticate),

  refreshSignupApiAuthenticateLegacy: createRefreshCache(
    signupApiAuthenticateLegacy
  ),

  refreshSignupApiAuthenticateMfa: createRefreshCache(signupApiAuthenticateMfa),

  refreshSignupApiEmailResend: createRefreshCache(signupApiEmailResend),

  refreshSignupApiLogout: createRefreshCache(signupApiLogout),

  refreshSignupApiMfaConfirm: createRefreshCache(signupApiMfaConfirm),

  refreshSignupApiMfaDisable: createRefreshCache(signupApiMfaDisable),

  refreshSignupApiMfaInit: createRefreshCache(signupApiMfaInit),

  refreshSignupApiPasswordChange: createRefreshCache(signupApiPasswordChange),

  refreshSignupApiPasswordResetConfirm: createRefreshCache(
    signupApiPasswordResetConfirm
  ),

  refreshSignupApiPasswordResetInit: createRefreshCache(
    signupApiPasswordResetInit
  ),

  refreshSignupApiPhoneNumberDelete: createRefreshCache(
    signupApiPhoneNumberDelete
  ),

  refreshSignupApiPhoneNumberGet: createRefreshCache(signupApiPhoneNumberGet),

  refreshSignupApiPhoneNumberInitProcess: createRefreshCache(
    signupApiPhoneNumberInitProcess
  ),

  refreshSignupApiPhoneNumberVerify: createRefreshCache(
    signupApiPhoneNumberVerify
  ),

  refreshSignupApiProfileChange: createRefreshCache(signupApiProfileChange),

  refreshSignupApiProfileGet: createRefreshCache(signupApiProfileGet),

  refreshSignupApiRecoverycodesReset: createRefreshCache(
    signupApiRecoverycodesReset
  ),

  refreshSignupApiRegister: createRefreshCache(signupApiRegister),

  refreshSignupApiRegistrationVerify: createRefreshCache(
    signupApiRegistrationVerify
  ),

  refreshSignupApiSessionGet: createRefreshCache(signupApiSessionGet),

  refreshSignupApiSessionsList: createRefreshCache(signupApiSessionsList),

  refreshSignupApiSshCreate: createRefreshCache(signupApiSshCreate),

  refreshSignupApiSshList: createRefreshCache(signupApiSshList),

  refreshSignupApiSshDelete: createRefreshCache(signupApiSshDelete),

  refreshSignupApiTokenCheck: createRefreshCache(signupApiTokenCheck),

  refreshSoftwareServiceListValidators: createRefreshCache(
    softwareServiceListValidators
  ),

  refreshSoftwareServiceValidate: createRefreshCache(softwareServiceValidate),

  refreshSoftwareServiceSoftwareConfigCreate: createRefreshCache(
    softwareServiceSoftwareConfigCreate
  ),

  refreshSoftwareServiceSoftwareConfigDelete: createRefreshCache(
    softwareServiceSoftwareConfigDelete
  ),

  refreshSoftwareServiceSoftwareConfigGetById: createRefreshCache(
    softwareServiceSoftwareConfigGetById
  ),

  refreshSoftwareServiceSoftwareConfigRollback: createRefreshCache(
    softwareServiceSoftwareConfigRollback
  ),

  refreshSoftwareServiceSoftwareConfigUpdate: createRefreshCache(
    softwareServiceSoftwareConfigUpdate
  ),

  refreshSoftwareServiceSoftwareConfigtemplateCreate: createRefreshCache(
    softwareServiceSoftwareConfigtemplateCreate
  ),

  refreshSoftwareServiceSoftwareConfigtemplateGetList: createRefreshCache(
    softwareServiceSoftwareConfigtemplateGetList
  ),

  refreshSoftwareServiceSoftwareConfigtemplateDelete: createRefreshCache(
    softwareServiceSoftwareConfigtemplateDelete
  ),

  refreshSoftwareServiceSoftwareConfigtemplateGetSpecific: createRefreshCache(
    softwareServiceSoftwareConfigtemplateGetSpecific
  ),

  refreshSoftwareServiceSoftwareGetById: createRefreshCache(
    softwareServiceSoftwareGetById
  ),

  refreshSoftwareServiceSoftwareSettingsDeclare: createRefreshCache(
    softwareServiceSoftwareSettingsDeclare
  ),
};
"
`;

exports[`Exporter creates correct snapshots for 'Mittwald Public API' example 2`] = `
"/* eslint-disable */
/* prettier-ignore */

/**
 * This file is auto-generated with openapi2ts (@mittwald/openapi-to-typescript)
 */

import { mockRequestFactory } from \\"@mittwald/api-client/dist/http/mockRequestFactory\\";
import * as descriptors from \\"./TestClient\\";

export const testRequestMocking = {
  mockFileServiceFilesGetById: mockRequestFactory(
    descriptors.fileServiceFilesGetById
  ),

  mockMailsystemServiceImapclusterCreate: mockRequestFactory(
    descriptors.mailsystemServiceImapclusterCreate
  ),

  mockMailsystemServiceImapclusterUpdate: mockRequestFactory(
    descriptors.mailsystemServiceImapclusterUpdate
  ),

  mockMailsystemServiceSettingCreate: mockRequestFactory(
    descriptors.mailsystemServiceSettingCreate
  ),

  mockMailsystemServiceSettingUpdate: mockRequestFactory(
    descriptors.mailsystemServiceSettingUpdate
  ),

  mockSignupApiAuthenticate: mockRequestFactory(
    descriptors.signupApiAuthenticate
  ),

  mockSignupApiAuthenticateLegacy: mockRequestFactory(
    descriptors.signupApiAuthenticateLegacy
  ),

  mockSignupApiAuthenticateMfa: mockRequestFactory(
    descriptors.signupApiAuthenticateMfa
  ),

  mockSignupApiEmailResend: mockRequestFactory(
    descriptors.signupApiEmailResend
  ),

  mockSignupApiLogout: mockRequestFactory(descriptors.signupApiLogout),

  mockSignupApiMfaConfirm: mockRequestFactory(descriptors.signupApiMfaConfirm),

  mockSignupApiMfaDisable: mockRequestFactory(descriptors.signupApiMfaDisable),

  mockSignupApiMfaInit: mockRequestFactory(descriptors.signupApiMfaInit),

  mockSignupApiPasswordChange: mockRequestFactory(
    descriptors.signupApiPasswordChange
  ),

  mockSignupApiPasswordResetConfirm: mockRequestFactory(
    descriptors.signupApiPasswordResetConfirm
  ),

  mockSignupApiPasswordResetInit: mockRequestFactory(
    descriptors.signupApiPasswordResetInit
  ),

  mockSignupApiPhoneNumberDelete: mockRequestFactory(
    descriptors.signupApiPhoneNumberDelete
  ),

  mockSignupApiPhoneNumberGet: mockRequestFactory(
    descriptors.signupApiPhoneNumberGet
  ),

  mockSignupApiPhoneNumberInitProcess: mockRequestFactory(
    descriptors.signupApiPhoneNumberInitProcess
  ),

  mockSignupApiPhoneNumberVerify: mockRequestFactory(
    descriptors.signupApiPhoneNumberVerify
  ),

  mockSignupApiProfileChange: mockRequestFactory(
    descriptors.signupApiProfileChange
  ),

  mockSignupApiProfileGet: mockRequestFactory(descriptors.signupApiProfileGet),

  mockSignupApiRecoverycodesReset: mockRequestFactory(
    descriptors.signupApiRecoverycodesReset
  ),

  mockSignupApiRegister: mockRequestFactory(descriptors.signupApiRegister),

  mockSignupApiRegistrationVerify: mockRequestFactory(
    descriptors.signupApiRegistrationVerify
  ),

  mockSignupApiSessionGet: mockRequestFactory(descriptors.signupApiSessionGet),

  mockSignupApiSessionsList: mockRequestFactory(
    descriptors.signupApiSessionsList
  ),

  mockSignupApiSshCreate: mockRequestFactory(descriptors.signupApiSshCreate),

  mockSignupApiSshList: mockRequestFactory(descriptors.signupApiSshList),

  mockSignupApiSshDelete: mockRequestFactory(descriptors.signupApiSshDelete),

  mockSignupApiTokenCheck: mockRequestFactory(descriptors.signupApiTokenCheck),

  mockSoftwareServiceListValidators: mockRequestFactory(
    descriptors.softwareServiceListValidators
  ),

  mockSoftwareServiceValidate: mockRequestFactory(
    descriptors.softwareServiceValidate
  ),

  mockSoftwareServiceSoftwareConfigCreate: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigCreate
  ),

  mockSoftwareServiceSoftwareConfigDelete: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigDelete
  ),

  mockSoftwareServiceSoftwareConfigGetById: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigGetById
  ),

  mockSoftwareServiceSoftwareConfigRollback: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigRollback
  ),

  mockSoftwareServiceSoftwareConfigUpdate: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigUpdate
  ),

  mockSoftwareServiceSoftwareConfigtemplateCreate: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigtemplateCreate
  ),

  mockSoftwareServiceSoftwareConfigtemplateGetList: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigtemplateGetList
  ),

  mockSoftwareServiceSoftwareConfigtemplateDelete: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigtemplateDelete
  ),

  mockSoftwareServiceSoftwareConfigtemplateGetSpecific: mockRequestFactory(
    descriptors.softwareServiceSoftwareConfigtemplateGetSpecific
  ),

  mockSoftwareServiceSoftwareGetById: mockRequestFactory(
    descriptors.softwareServiceSoftwareGetById
  ),

  mockSoftwareServiceSoftwareSettingsDeclare: mockRequestFactory(
    descriptors.softwareServiceSoftwareSettingsDeclare
  ),
};
"
`;

exports[`Exporter creates correct snapshots for 'Pet Store' example 1`] = `
"/* eslint-disable */
/* prettier-ignore */

/**
 * This file is auto-generated with openapi2ts (@mittwald/openapi-to-typescript)
 */

import { KyClient } from \\"@mittwald/api-client/dist/http/KyClient\\";
import { Client } from \\"@mittwald/api-client/dist/http/Client\\";
import { RequestFunction } from \\"@mittwald/api-client/dist/OperationDescriptor\\";
import { OperationDescriptor } from \\"@mittwald/api-client/dist/OperationDescriptor\\";

/**
 * ====================================
 * Types
 * ====================================
 */
export declare module Test {
  namespace Paths {
    namespace Pet {
      namespace Put {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };

          type RequestBody = Test.Components.Schemas.Pet;
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.Pet;

              type Application_Json = Test.Components.Schemas.Pet;
            }
          }

          namespace $400 {
            namespace Content {}
          }

          namespace $404 {
            namespace Content {}
          }

          namespace $405 {
            namespace Content {}
          }
        }
      }

      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };

          type RequestBody = Test.Components.Schemas.Pet;
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.Pet;

              type Application_Json = Test.Components.Schemas.Pet;
            }
          }

          namespace $405 {
            namespace Content {}
          }
        }
      }
    }

    namespace Pet_FindByStatus {
      namespace Get {
        namespace Parameters {
          interface Query {
            status?: \\"available\\" | \\"pending\\" | \\"sold\\";
          }

          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.Pet[];

              type Application_Json = Test.Components.Schemas.Pet[];
            }
          }

          namespace $400 {
            namespace Content {}
          }
        }
      }
    }

    namespace Pet_FindByTags {
      namespace Get {
        namespace Parameters {
          interface Query {
            tags?: string[];
          }

          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.Pet[];

              type Application_Json = Test.Components.Schemas.Pet[];
            }
          }

          namespace $400 {
            namespace Content {}
          }
        }
      }
    }

    namespace Pet_PetId {
      namespace Get {
        namespace Parameters {
          interface Path {
            petId: number;
          }

          interface Header {
            api_key: string;
            Accept?: \\"application/xml\\" | \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.Pet;

              type Application_Json = Test.Components.Schemas.Pet;
            }
          }

          namespace $400 {
            namespace Content {}
          }

          namespace $404 {
            namespace Content {}
          }
        }
      }

      namespace Post {
        namespace Parameters {
          interface Path {
            petId: number;
          }

          interface Query {
            name?: string;
            status?: string;
          }

          type Header = {
            Accept?: string;
          };
        }

        namespace Responses {
          namespace $405 {
            namespace Content {}
          }
        }
      }

      namespace Delete {
        namespace Parameters {
          interface Header {
            api_key?: string;
            Accept?: string;
          }

          interface Path {
            petId: number;
          }
        }

        namespace Responses {
          namespace $400 {
            namespace Content {}
          }
        }
      }
    }

    namespace Pet_PetId_UploadImage {
      namespace Post {
        namespace Parameters {
          interface Path {
            petId: number;
          }

          interface Query {
            additionalMetadata?: string;
          }

          type Header = {
            Accept?: \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.ApiResponse;
            }
          }
        }
      }
    }

    namespace Store_Inventory {
      namespace Get {
        namespace Parameters {
          interface Header {
            api_key: string;
            Accept?: \\"application/json\\";
          }
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              interface Application_Json {
                [a: string]: any;
              }
            }
          }
        }
      }
    }

    namespace Store_Order {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\";
          };

          type RequestBody = Test.Components.Schemas.Order;
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Json = Test.Components.Schemas.Order;
            }
          }

          namespace $405 {
            namespace Content {}
          }
        }
      }
    }

    namespace Store_Order_OrderId {
      namespace Get {
        namespace Parameters {
          interface Path {
            orderId: number;
          }

          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.Order;

              type Application_Json = Test.Components.Schemas.Order;
            }
          }

          namespace $400 {
            namespace Content {}
          }

          namespace $404 {
            namespace Content {}
          }
        }
      }

      namespace Delete {
        namespace Parameters {
          interface Path {
            orderId: number;
          }

          type Header = {
            Accept?: string;
          };
        }

        namespace Responses {
          namespace $400 {
            namespace Content {}
          }

          namespace $404 {
            namespace Content {}
          }
        }
      }
    }

    namespace User {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/json\\" | \\"application/xml\\";
          };

          type RequestBody = Test.Components.Schemas.User;
        }

        namespace Responses {
          namespace Default {
            namespace Content {
              type Application_Json = Test.Components.Schemas.User;

              type Application_Xml = Test.Components.Schemas.User;
            }
          }
        }
      }
    }

    namespace User_CreateWithList {
      namespace Post {
        namespace Parameters {
          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };

          type RequestBody = Test.Components.Schemas.User[];
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.User;

              type Application_Json = Test.Components.Schemas.User;
            }
          }

          namespace Default {
            namespace Content {}
          }
        }
      }
    }

    namespace User_Login {
      namespace Get {
        namespace Parameters {
          interface Query {
            username?: string;
            password?: string;
          }

          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            interface Headers {
              \\"X-Rate-Limit\\"?: number;
              \\"X-Expires-After\\"?: string;
            }

            namespace Content {
              type Application_Xml = string;

              type Application_Json = string;
            }
          }

          namespace $400 {
            namespace Content {}
          }
        }
      }
    }

    namespace User_Logout {
      namespace Get {
        namespace Parameters {
          type Header = {
            Accept?: string;
          };
        }

        namespace Responses {
          namespace Default {
            namespace Content {}
          }
        }
      }
    }

    namespace User_Username {
      namespace Get {
        namespace Parameters {
          interface Path {
            username: string;
          }

          type Header = {
            Accept?: \\"application/xml\\" | \\"application/json\\";
          };
        }

        namespace Responses {
          namespace $200 {
            namespace Content {
              type Application_Xml = Test.Components.Schemas.User;

              type Application_Json = Test.Components.Schemas.User;
            }
          }

          namespace $400 {
            namespace Content {}
          }

          namespace $404 {
            namespace Content {}
          }
        }
      }

      namespace Put {
        namespace Parameters {
          interface Path {
            username: string;
          }

          type Header = {
            Accept?: string;
          };

          type RequestBody = Test.Components.Schemas.User;
        }

        namespace Responses {
          namespace Default {
            namespace Content {}
          }
        }
      }

      namespace Delete {
        namespace Parameters {
          interface Path {
            username: string;
          }

          type Header = {
            Accept?: string;
          };
        }

        namespace Responses {
          namespace $400 {
            namespace Content {}
          }

          namespace $404 {
            namespace Content {}
          }
        }
      }
    }
  }

  namespace Components {
    namespace Schemas {
      interface Order {
        id?: number;
        petId?: number;
        quantity?: number;
        shipDate?: string;
        status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
        complete?: boolean;
      }

      interface Customer {
        id?: number;
        username?: string;
        address?: Test.Components.Schemas.Address[];
      }

      interface Address {
        street?: string;
        city?: string;
        state?: string;
        zip?: string;
      }

      interface Category {
        id?: number;
        name?: string;
      }

      interface User {
        id?: number;
        username?: string;
        firstName?: string;
        lastName?: string;
        email?: string;
        password?: string;
        phone?: string;
        userStatus?: number;
      }

      interface Tag {
        id?: number;
        name?: string;
      }

      interface Pet {
        id?: number;
        name: string;
        category?: Test.Components.Schemas.Category;
        photoUrls: string[];
        tags?: Test.Components.Schemas.Tag[];
        status?: \\"available\\" | \\"pending\\" | \\"sold\\";
      }

      interface ApiResponse {
        code?: number;
        type?: string;
        message?: string;
      }
    }

    namespace Parameters {}
  }

  namespace Definitions {}
}

/**
 * ====================================
 * Descriptors
 * ====================================
 */

export const updatePet: OperationDescriptor<
  {
    requestBody: Test.Paths.Pet.Put.Parameters.RequestBody;

    header?: Test.Paths.Pet.Put.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.Pet.Put.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.Pet.Put.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      content: undefined;
    })
  | ({ status: 404 } & {
      content: undefined;
    })
  | ({ status: 405 } & {
      content: undefined;
    })
> = {
  path: \\"/pet\\",
  method: \\"put\\",
  operationId: \\"updatePet\\",
};

export const addPet: OperationDescriptor<
  {
    requestBody: Test.Paths.Pet.Post.Parameters.RequestBody;

    header?: Test.Paths.Pet.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.Pet.Post.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.Pet.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 405 } & {
      content: undefined;
    })
> = {
  path: \\"/pet\\",
  method: \\"post\\",
  operationId: \\"addPet\\",
};

export const findPetsByStatus: OperationDescriptor<
  {
    header?: Test.Paths.Pet_FindByStatus.Get.Parameters.Header;

    query: Test.Paths.Pet_FindByStatus.Get.Parameters.Query;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.Pet_FindByStatus.Get.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.Pet_FindByStatus.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      content: undefined;
    })
> = {
  path: \\"/pet/findByStatus\\",
  method: \\"get\\",
  operationId: \\"findPetsByStatus\\",
};

export const findPetsByTags: OperationDescriptor<
  {
    header?: Test.Paths.Pet_FindByTags.Get.Parameters.Header;

    query: Test.Paths.Pet_FindByTags.Get.Parameters.Query;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.Pet_FindByTags.Get.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.Pet_FindByTags.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      content: undefined;
    })
> = {
  path: \\"/pet/findByTags\\",
  method: \\"get\\",
  operationId: \\"findPetsByTags\\",
};

export const getPetById: OperationDescriptor<
  {
    header: Test.Paths.Pet_PetId.Get.Parameters.Header;

    path: Test.Paths.Pet_PetId.Get.Parameters.Path;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.Pet_PetId.Get.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.Pet_PetId.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      content: undefined;
    })
  | ({ status: 404 } & {
      content: undefined;
    })
> = {
  path: \\"/pet/{petId}\\",
  method: \\"get\\",
  operationId: \\"getPetById\\",
};

export const updatePetWithForm: OperationDescriptor<
  {
    header?: Test.Paths.Pet_PetId.Post.Parameters.Header;

    path: Test.Paths.Pet_PetId.Post.Parameters.Path;

    query: Test.Paths.Pet_PetId.Post.Parameters.Query;
  },
  { status: 405 } & {
    content: undefined;
  }
> = {
  path: \\"/pet/{petId}\\",
  method: \\"post\\",
  operationId: \\"updatePetWithForm\\",
};

export const deletePet: OperationDescriptor<
  {
    header: Test.Paths.Pet_PetId.Delete.Parameters.Header;

    path: Test.Paths.Pet_PetId.Delete.Parameters.Path;
  },
  { status: 400 } & {
    content: undefined;
  }
> = {
  path: \\"/pet/{petId}\\",
  method: \\"delete\\",
  operationId: \\"deletePet\\",
};

export const uploadFile: OperationDescriptor<
  {
    header?: Test.Paths.Pet_PetId_UploadImage.Post.Parameters.Header;

    path: Test.Paths.Pet_PetId_UploadImage.Post.Parameters.Path;

    query: Test.Paths.Pet_PetId_UploadImage.Post.Parameters.Query;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.Pet_PetId_UploadImage.Post.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/pet/{petId}/uploadImage\\",
  method: \\"post\\",
  operationId: \\"uploadFile\\",
};

export const getInventory: OperationDescriptor<
  {
    header: Test.Paths.Store_Inventory.Get.Parameters.Header;
  },
  { status: 200 } & {
    mediaType: \\"application/json\\";
    content: Test.Paths.Store_Inventory.Get.Responses.$200.Content.Application_Json;
  }
> = {
  path: \\"/store/inventory\\",
  method: \\"get\\",
  operationId: \\"getInventory\\",
};

export const placeOrder: OperationDescriptor<
  {
    requestBody: Test.Paths.Store_Order.Post.Parameters.RequestBody;

    header?: Test.Paths.Store_Order.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.Store_Order.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 405 } & {
      content: undefined;
    })
> = {
  path: \\"/store/order\\",
  method: \\"post\\",
  operationId: \\"placeOrder\\",
};

export const getOrderById: OperationDescriptor<
  {
    header?: Test.Paths.Store_Order_OrderId.Get.Parameters.Header;

    path: Test.Paths.Store_Order_OrderId.Get.Parameters.Path;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.Store_Order_OrderId.Get.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.Store_Order_OrderId.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      content: undefined;
    })
  | ({ status: 404 } & {
      content: undefined;
    })
> = {
  path: \\"/store/order/{orderId}\\",
  method: \\"get\\",
  operationId: \\"getOrderById\\",
};

export const deleteOrder: OperationDescriptor<
  {
    header?: Test.Paths.Store_Order_OrderId.Delete.Parameters.Header;

    path: Test.Paths.Store_Order_OrderId.Delete.Parameters.Path;
  },
  | ({ status: 400 } & {
      content: undefined;
    })
  | ({ status: 404 } & {
      content: undefined;
    })
> = {
  path: \\"/store/order/{orderId}\\",
  method: \\"delete\\",
  operationId: \\"deleteOrder\\",
};

export const createUser: OperationDescriptor<
  {
    requestBody: Test.Paths.User.Post.Parameters.RequestBody;

    header?: Test.Paths.User.Post.Parameters.Header;
  },
  | ({ status: 0 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.User.Post.Responses.Default.Content.Application_Json;
    })
  | ({ status: 0 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.User.Post.Responses.Default.Content.Application_Xml;
    })
> = {
  path: \\"/user\\",
  method: \\"post\\",
  operationId: \\"createUser\\",
};

export const createUsersWithListInput: OperationDescriptor<
  {
    requestBody: Test.Paths.User_CreateWithList.Post.Parameters.RequestBody;

    header?: Test.Paths.User_CreateWithList.Post.Parameters.Header;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.User_CreateWithList.Post.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.User_CreateWithList.Post.Responses.$200.Content.Application_Json;
    })
  | ({ status: 0 } & {
      content: undefined;
    })
> = {
  path: \\"/user/createWithList\\",
  method: \\"post\\",
  operationId: \\"createUsersWithListInput\\",
};

export const loginUser: OperationDescriptor<
  {
    header?: Test.Paths.User_Login.Get.Parameters.Header;

    query: Test.Paths.User_Login.Get.Parameters.Query;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.User_Login.Get.Responses.$200.Content.Application_Xml;

      headers: Test.Paths.User_Login.Get.Responses.$200.Headers;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.User_Login.Get.Responses.$200.Content.Application_Json;

      headers: Test.Paths.User_Login.Get.Responses.$200.Headers;
    })
  | ({ status: 400 } & {
      content: undefined;
    })
> = {
  path: \\"/user/login\\",
  method: \\"get\\",
  operationId: \\"loginUser\\",
};

export const logoutUser: OperationDescriptor<
  {
    header?: Test.Paths.User_Logout.Get.Parameters.Header;
  },
  { status: 0 } & {
    content: undefined;
  }
> = {
  path: \\"/user/logout\\",
  method: \\"get\\",
  operationId: \\"logoutUser\\",
};

export const getUserByName: OperationDescriptor<
  {
    header?: Test.Paths.User_Username.Get.Parameters.Header;

    path: Test.Paths.User_Username.Get.Parameters.Path;
  },
  | ({ status: 200 } & {
      mediaType: \\"application/xml\\";
      content: Test.Paths.User_Username.Get.Responses.$200.Content.Application_Xml;
    })
  | ({ status: 200 } & {
      mediaType: \\"application/json\\";
      content: Test.Paths.User_Username.Get.Responses.$200.Content.Application_Json;
    })
  | ({ status: 400 } & {
      content: undefined;
    })
  | ({ status: 404 } & {
      content: undefined;
    })
> = {
  path: \\"/user/{username}\\",
  method: \\"get\\",
  operationId: \\"getUserByName\\",
};

export const updateUser: OperationDescriptor<
  {
    requestBody: Test.Paths.User_Username.Put.Parameters.RequestBody;

    header?: Test.Paths.User_Username.Put.Parameters.Header;

    path: Test.Paths.User_Username.Put.Parameters.Path;
  },
  { status: 0 } & {
    content: undefined;
  }
> = {
  path: \\"/user/{username}\\",
  method: \\"put\\",
  operationId: \\"updateUser\\",
};

export const deleteUser: OperationDescriptor<
  {
    header?: Test.Paths.User_Username.Delete.Parameters.Header;

    path: Test.Paths.User_Username.Delete.Parameters.Path;
  },
  | ({ status: 400 } & {
      content: undefined;
    })
  | ({ status: 404 } & {
      content: undefined;
    })
> = {
  path: \\"/user/{username}\\",
  method: \\"delete\\",
  operationId: \\"deleteUser\\",
};

/**
 * ====================================
 * Client
 * ====================================
 */
export class TestClient {
  private static instance: TestClient | undefined;

  public static getInstance(): TestClient {
    const requireClientInstanceMethod = (
      methodName: string | symbol
    ): Function => {
      const client = TestClient.instance as
        | undefined
        | Record<string | symbol, any>;

      if (!client) {
        throw new Error(
          \\"ApiClientInstanceNotSet: API-Client-instance must be set before using hooks. Use TestClient.setInstance().\\"
        );
      }

      if (!(methodName in client)) {
        throw new Error(
          \`InvalidMethodCall: Could not find method \${String(
            methodName
          )} in TestClient\`
        );
      }

      const method = client[methodName];

      if (typeof method !== \\"function\\") {
        throw new Error(
          \`InvalidMethodCall: \${String(
            methodName
          )} in TestClient is not a function\`
        );
      }

      return method;
    };

    /**
     * Catch access to all props and return proxy method that proxies
     * calls to the underlying client instance, while accessing the instance
     * at call-time.
     */
    const lazyAccessingClientInstanceHandler: ProxyHandler<TestClient> = {
      get(client, prop) {
        return (...params: any[]) =>
          requireClientInstanceMethod(prop)(...params);
      },
    };

    return new Proxy({} as TestClient, lazyAccessingClientInstanceHandler);
  }

  public static setInstance(client: TestClient): void {
    TestClient.instance = client;
  }

  public updatePet: RequestFunction<typeof updatePet>;

  public addPet: RequestFunction<typeof addPet>;

  public findPetsByStatus: RequestFunction<typeof findPetsByStatus>;

  public findPetsByTags: RequestFunction<typeof findPetsByTags>;

  public getPetById: RequestFunction<typeof getPetById>;

  public updatePetWithForm: RequestFunction<typeof updatePetWithForm>;

  public deletePet: RequestFunction<typeof deletePet>;

  public uploadFile: RequestFunction<typeof uploadFile>;

  public getInventory: RequestFunction<typeof getInventory>;

  public placeOrder: RequestFunction<typeof placeOrder>;

  public getOrderById: RequestFunction<typeof getOrderById>;

  public deleteOrder: RequestFunction<typeof deleteOrder>;

  public createUser: RequestFunction<typeof createUser>;

  public createUsersWithListInput: RequestFunction<
    typeof createUsersWithListInput
  >;

  public loginUser: RequestFunction<typeof loginUser>;

  public logoutUser: RequestFunction<typeof logoutUser>;

  public getUserByName: RequestFunction<typeof getUserByName>;

  public updateUser: RequestFunction<typeof updateUser>;

  public deleteUser: RequestFunction<typeof deleteUser>;

  public constructor(clientOrUrl: Client | string) {
    const client =
      typeof clientOrUrl === \\"string\\"
        ? new KyClient({ ky: { prefixUrl: clientOrUrl } })
        : clientOrUrl;

    this.updatePet = client.requestFunctionFactory(updatePet);

    this.addPet = client.requestFunctionFactory(addPet);

    this.findPetsByStatus = client.requestFunctionFactory(findPetsByStatus);

    this.findPetsByTags = client.requestFunctionFactory(findPetsByTags);

    this.getPetById = client.requestFunctionFactory(getPetById);

    this.updatePetWithForm = client.requestFunctionFactory(updatePetWithForm);

    this.deletePet = client.requestFunctionFactory(deletePet);

    this.uploadFile = client.requestFunctionFactory(uploadFile);

    this.getInventory = client.requestFunctionFactory(getInventory);

    this.placeOrder = client.requestFunctionFactory(placeOrder);

    this.getOrderById = client.requestFunctionFactory(getOrderById);

    this.deleteOrder = client.requestFunctionFactory(deleteOrder);

    this.createUser = client.requestFunctionFactory(createUser);

    this.createUsersWithListInput = client.requestFunctionFactory(
      createUsersWithListInput
    );

    this.loginUser = client.requestFunctionFactory(loginUser);

    this.logoutUser = client.requestFunctionFactory(logoutUser);

    this.getUserByName = client.requestFunctionFactory(getUserByName);

    this.updateUser = client.requestFunctionFactory(updateUser);

    this.deleteUser = client.requestFunctionFactory(deleteUser);
  }
}

/**
 * ====================================
 * React Hooks
 * ====================================
 */
import { createGetApiResource } from \\"@mittwald/react-api-hooks/dist/createGetApiResource\\";
import { createRefreshCache } from \\"@mittwald/react-api-hooks/dist/createRefreshCache\\";

export const useUpdatePet = createGetApiResource(
  updatePet,
  TestClient.getInstance().updatePet
);

export const useAddPet = createGetApiResource(
  addPet,
  TestClient.getInstance().addPet
);

export const useFindPetsByStatus = createGetApiResource(
  findPetsByStatus,
  TestClient.getInstance().findPetsByStatus
);

export const useFindPetsByTags = createGetApiResource(
  findPetsByTags,
  TestClient.getInstance().findPetsByTags
);

export const useGetPetById = createGetApiResource(
  getPetById,
  TestClient.getInstance().getPetById
);

export const useUpdatePetWithForm = createGetApiResource(
  updatePetWithForm,
  TestClient.getInstance().updatePetWithForm
);

export const useDeletePet = createGetApiResource(
  deletePet,
  TestClient.getInstance().deletePet
);

export const useUploadFile = createGetApiResource(
  uploadFile,
  TestClient.getInstance().uploadFile
);

export const useGetInventory = createGetApiResource(
  getInventory,
  TestClient.getInstance().getInventory
);

export const usePlaceOrder = createGetApiResource(
  placeOrder,
  TestClient.getInstance().placeOrder
);

export const useGetOrderById = createGetApiResource(
  getOrderById,
  TestClient.getInstance().getOrderById
);

export const useDeleteOrder = createGetApiResource(
  deleteOrder,
  TestClient.getInstance().deleteOrder
);

export const useCreateUser = createGetApiResource(
  createUser,
  TestClient.getInstance().createUser
);

export const useCreateUsersWithListInput = createGetApiResource(
  createUsersWithListInput,
  TestClient.getInstance().createUsersWithListInput
);

export const useLoginUser = createGetApiResource(
  loginUser,
  TestClient.getInstance().loginUser
);

export const useLogoutUser = createGetApiResource(
  logoutUser,
  TestClient.getInstance().logoutUser
);

export const useGetUserByName = createGetApiResource(
  getUserByName,
  TestClient.getInstance().getUserByName
);

export const useUpdateUser = createGetApiResource(
  updateUser,
  TestClient.getInstance().updateUser
);

export const useDeleteUser = createGetApiResource(
  deleteUser,
  TestClient.getInstance().deleteUser
);

export const testCache = {
  refreshUpdatePet: createRefreshCache(updatePet),

  refreshAddPet: createRefreshCache(addPet),

  refreshFindPetsByStatus: createRefreshCache(findPetsByStatus),

  refreshFindPetsByTags: createRefreshCache(findPetsByTags),

  refreshGetPetById: createRefreshCache(getPetById),

  refreshUpdatePetWithForm: createRefreshCache(updatePetWithForm),

  refreshDeletePet: createRefreshCache(deletePet),

  refreshUploadFile: createRefreshCache(uploadFile),

  refreshGetInventory: createRefreshCache(getInventory),

  refreshPlaceOrder: createRefreshCache(placeOrder),

  refreshGetOrderById: createRefreshCache(getOrderById),

  refreshDeleteOrder: createRefreshCache(deleteOrder),

  refreshCreateUser: createRefreshCache(createUser),

  refreshCreateUsersWithListInput: createRefreshCache(createUsersWithListInput),

  refreshLoginUser: createRefreshCache(loginUser),

  refreshLogoutUser: createRefreshCache(logoutUser),

  refreshGetUserByName: createRefreshCache(getUserByName),

  refreshUpdateUser: createRefreshCache(updateUser),

  refreshDeleteUser: createRefreshCache(deleteUser),
};
"
`;

exports[`Exporter creates correct snapshots for 'Pet Store' example 2`] = `
"/* eslint-disable */
/* prettier-ignore */

/**
 * This file is auto-generated with openapi2ts (@mittwald/openapi-to-typescript)
 */

import { mockRequestFactory } from \\"@mittwald/api-client/dist/http/mockRequestFactory\\";
import * as descriptors from \\"./TestClient\\";

export const testRequestMocking = {
  mockUpdatePet: mockRequestFactory(descriptors.updatePet),

  mockAddPet: mockRequestFactory(descriptors.addPet),

  mockFindPetsByStatus: mockRequestFactory(descriptors.findPetsByStatus),

  mockFindPetsByTags: mockRequestFactory(descriptors.findPetsByTags),

  mockGetPetById: mockRequestFactory(descriptors.getPetById),

  mockUpdatePetWithForm: mockRequestFactory(descriptors.updatePetWithForm),

  mockDeletePet: mockRequestFactory(descriptors.deletePet),

  mockUploadFile: mockRequestFactory(descriptors.uploadFile),

  mockGetInventory: mockRequestFactory(descriptors.getInventory),

  mockPlaceOrder: mockRequestFactory(descriptors.placeOrder),

  mockGetOrderById: mockRequestFactory(descriptors.getOrderById),

  mockDeleteOrder: mockRequestFactory(descriptors.deleteOrder),

  mockCreateUser: mockRequestFactory(descriptors.createUser),

  mockCreateUsersWithListInput: mockRequestFactory(
    descriptors.createUsersWithListInput
  ),

  mockLoginUser: mockRequestFactory(descriptors.loginUser),

  mockLogoutUser: mockRequestFactory(descriptors.logoutUser),

  mockGetUserByName: mockRequestFactory(descriptors.getUserByName),

  mockUpdateUser: mockRequestFactory(descriptors.updateUser),

  mockDeleteUser: mockRequestFactory(descriptors.deleteUser),
};
"
`;
