variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  IMAGE_TAG_STABLE: $CI_REGISTRY_IMAGE:stable
  DOCKERFILE: ./Dockerfile

.test:dockerbuild:
  image: docker
  tags:
    - dockermultistage
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -f "${DOCKERFILE}" --build-arg CI_JOB_TOKEN="${CI_JOB_TOKEN}" -t "${IMAGE_TAG_LATEST}" .
  except:
    - tags

.publish:dev:docker:
  image: docker
  tags:
    - dockermultistage
  before_script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
  script:
    - docker build -f "${DOCKERFILE}" --build-arg CI_JOB_TOKEN="${CI_JOB_TOKEN}" -t "${IMAGE_TAG_LATEST}" .
    - docker push "${IMAGE_TAG_LATEST}"
  only:
    - master
  except:
    # do this only for new commits. theoretically you can tag an older commit which should not trigger the latest tag
    - tags

.publish:docker:
  tags:
    - dockermultistage
  image: docker
  before_script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
  script:
    - docker build -f "${DOCKERFILE}" --build-arg CI_JOB_TOKEN="${CI_JOB_TOKEN}" -t "${IMAGE_TAG_STABLE}" -t "${IMAGE_TAG}" .
    - docker push "${IMAGE_TAG_STABLE}"
    - docker push "${IMAGE_TAG}"
  # do this only for tags and only tag doeâ€™s no contains alpha or beta
  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_COMMIT_TAG !~ /(alpha|beta)/"

.publish:tag:docker:
  tags:
    - dockermultistage
  image: docker
  before_script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
  script:
    - docker build -f "${DOCKERFILE}" --build-arg CI_JOB_TOKEN="${CI_JOB_TOKEN}" -t "${IMAGE_TAG}" .
    - docker push "${IMAGE_TAG}"
  only:
    - tags
  except:
    # master tags are already handled by the job .publish:docker
    - master
